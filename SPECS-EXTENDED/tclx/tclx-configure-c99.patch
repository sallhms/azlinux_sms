Fix various issues related to C99 compatibility.  configure is not
recreated during the build, so patch it directly.  Most issues
are in code generated by autoconf.

Raised upstream here: <https://sourceforge.net/p/tclx/bugs/84/>

The tclconfig/tcl.m4 change has been upstreamed to tcl itself:

  <https://core.tcl-lang.org/tcl/info/15845d9fd8>

diff --git a/configure b/configure
index 79bdfb059d3f1fee..f4f9fff20f2b53fc 100755
--- a/configure
+++ b/configure
@@ -2500,7 +2500,7 @@ if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
   (exit $ac_status); }; }; then
   for ac_declaration in \
-   '' \
+   '#include <stdlib.h>' \
    'extern "C" void std::exit (int) throw (); using std::exit;' \
    'extern "C" void std::exit (int); using std::exit;' \
    'extern "C" void exit (int) throw ();' \
@@ -3203,8 +3203,8 @@ main ()
   for (i = 0; i < 256; i++)
     if (XOR (islower (i), ISLOWER (i))
 	|| toupper (i) != TOUPPER (i))
-      exit(2);
-  exit (0);
+      return 2;
+  return 0;
 }
 _ACEOF
 rm -f conftest$ac_exeext
@@ -10944,7 +10944,7 @@ main ()
 {
 extern long timezone;
 	    timezone += 1;
-	    exit (0);
+	    return 0;
   ;
   return 0;
 }
@@ -11154,11 +11154,15 @@ cat >>conftest.$ac_ext <<_ACEOF
 
 #include <sys/types.h>
 #include <sys/times.h>
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
+int
 main() {
     struct tms cpu;
     times(&cpu);
     sleep(2);
-    exit ((times(&cpu) > 0) ? 0 : 1);
+    return (times(&cpu) > 0) ? 0 : 1;
 }
 
 _ACEOF
@@ -13398,7 +13402,7 @@ int
 main ()
 {
 
-    	    if (catclose ((nl_catd) 0) == 0) exit (0);
+    	    if (catclose ((nl_catd) 0) == 0) return 0;
   ;
   return 0;
 }
diff --git a/configure.in b/configure.in
index b1699b345eb71908..621a2560e0baf231 100755
--- a/configure.in
+++ b/configure.in
@@ -194,11 +194,15 @@ WIFEXITED(x);	/* Generates compiler error if WIFEXITED uses an int. */
     AC_TRY_RUN([
 #include <sys/types.h>
 #include <sys/times.h>
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
+int
 main() {
     struct tms cpu;
     times(&cpu);
     sleep(2);
-    exit ((times(&cpu) > 0) ? 0 : 1);
+    return (times(&cpu) > 0) ? 0 : 1;
 }
 ], [AC_MSG_RESULT(elapsed real time)],
        [AC_MSG_RESULT(a status)
@@ -268,7 +272,7 @@ main() {
     AC_CHECK_FUNC(catgets,
     	[AC_MSG_CHECKING([catclose return value])
     	 AC_TRY_COMPILE([#include <nl_types.h>], [
-    	    if (catclose ((nl_catd) 0) == 0) exit (0);],
+    	    if (catclose ((nl_catd) 0) == 0) return 0;],
     	    AC_MSG_RESULT(ok), [
     	    AC_MSG_RESULT([broken catclose return type])
     	    AC_DEFINE(BAD_CATCLOSE)])],
diff --git a/tclconfig/tcl.m4 b/tclconfig/tcl.m4
index 2cef1a7d3a719cfe..60b5b61fb8d304ff 100644
--- a/tclconfig/tcl.m4
+++ b/tclconfig/tcl.m4
@@ -2386,7 +2386,7 @@ AC_DEFUN(TEA_TIME_HANDLER, [
 	AC_TRY_COMPILE([#include <time.h>],
 	    [extern long timezone;
 	    timezone += 1;
-	    exit (0);],
+	    return 0;],
 	    tcl_cv_timezone_long=yes, tcl_cv_timezone_long=no))
     AC_MSG_RESULT([$tcl_cv_timezone_long])
     if test $tcl_cv_timezone_long = yes ; then
@@ -2400,7 +2400,7 @@ AC_DEFUN(TEA_TIME_HANDLER, [
 	    AC_TRY_COMPILE([#include <time.h>],
 		[extern time_t timezone;
 		timezone += 1;
-		exit (0);],
+		return 0;],
 		tcl_cv_timezone_time=yes, tcl_cv_timezone_time=no))
 	AC_MSG_RESULT([$tcl_cv_timezone_time])
 	if test $tcl_cv_timezone_time = yes ; then
