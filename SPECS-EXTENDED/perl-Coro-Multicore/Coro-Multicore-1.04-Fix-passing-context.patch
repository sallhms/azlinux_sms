From 8a9801c581700bc0d707c70da16b19f4a47ff378 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Petr=20P=C3=ADsa=C5=99?= <ppisar@redhat.com>
Date: Fri, 19 Jan 2018 09:45:10 +0100
Subject: [PATCH] Fix passing context
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Since Coro-Multicore-0.03, build fails with threaded Perl 5.26.1:

In file included from Multicore.xs:4:0:
Multicore.xs: In function 'pmapi_acquire':
/usr/lib64/perl5/CORE/perl.h:176:16: error: 'my_perl' undeclared (first use in this function); did you mean 'my_fork'?
 #  define aTHX my_perl
                ^
/usr/lib64/perl5/CORE/embedvar.h:38:18: note: in expansion of macro 'aTHX'
 #    define vTHX aTHX
                  ^~~~
/usr/lib64/perl5/CORE/embedvar.h:335:22: note: in expansion of macro 'vTHX'
 #define PL_top_env  (vTHX->Itop_env)
                      ^~~~
/usr/lib64/perl5/CORE/cop.h:131:6: note: in expansion of macro 'PL_top_env'
  if (PL_top_env->je_prev)    \
      ^~~~~~~~~~
Multicore.xs:251:5: note: in expansion of macro 'JMPENV_JUMP'
     JMPENV_JUMP (jeret);
     ^~~~~~~~~~~

MultiCore.xs defines PERL_NO_GET_CONTEXT, thus pmapi_acquire()
function needs an explicit context argument to be available when
calling JMPENV_JUMP() macro.

A similar issue emerged in Coro-MultiCore-1.04 with eval_pv() macro.

See
<http://blogs.perl.org/users/nick_wellnhofer/2015/03/writing-xs-like-a-pro---perl-no-get-context-and-static-functions.html>.

Signed-off-by: Petr Písař <ppisar@redhat.com>
---
 Multicore.xs    | 11 ++++++-----
 perlmulticore.h | 10 +++++-----
 2 files changed, 11 insertions(+), 10 deletions(-)

diff --git a/Multicore.xs b/Multicore.xs
index 61fad96a9e12ab0b..01a68001d8b42402 100644
--- a/Multicore.xs
+++ b/Multicore.xs
@@ -187,7 +187,7 @@ X_THREAD_PROC(thread_proc)
 }
 
 static void
-start_thread (void)
+start_thread (pTHX)
 {
   xthread_t tid;
 
@@ -216,7 +216,7 @@ start_thread (void)
 }
 
 static void
-pmapi_release (void)
+pmapi_release (pTHX)
 {
   if (! ((thread_enable ? thread_enable : global_enable) & 1))
     {
@@ -241,7 +241,7 @@ pmapi_release (void)
   X_LOCK (release_m);
 
   if (idle <= min_idle)
-    start_thread ();
+    start_thread (aTHX);
 
   tctxs_put (&releasers, ctx);
   X_COND_SIGNAL (release_c);
@@ -256,7 +256,7 @@ pmapi_release (void)
 }
 
 static void
-pmapi_acquire (void)
+pmapi_acquire (pTHX)
 {
   int jeret;
   struct tctx *ctx = X_TLS_GET (current_key);
@@ -328,14 +328,15 @@ BOOT:
 	I_CORO_API ("Coro::Multicore");
 
         if (0) { /*D*/
+        dTHX;
         X_LOCK (release_m);
         while (idle < min_idle)
-          start_thread ();
+          start_thread (aTHX);
         X_UNLOCK (release_m);
         }
 
         /* not perfectly efficient to do it this way, but it is simple */
-	perl_multicore_init (); /* calls release */
+	perl_multicore_init (perl_thx); /* calls release */
         perl_multicore_api->pmapi_release = pmapi_release;
         perl_multicore_api->pmapi_acquire = pmapi_acquire;
 }
diff --git a/perlmulticore.h b/perlmulticore.h
index 7ad38a45923cee60..0999e35c471b330e 100644
--- a/perlmulticore.h
+++ b/perlmulticore.h
@@ -185,11 +185,11 @@ START_EXTERN_C
 /* contain only the two function pointers for release/acquire */
 struct perl_multicore_api
 {
-  void (*pmapi_release)(void);
-  void (*pmapi_acquire)(void);
+  void (*pmapi_release)(pTHX);
+  void (*pmapi_acquire)(pTHX);
 };
 
-static void perl_multicore_init (void);
+static void perl_multicore_init (pTHX);
 
 static const struct perl_multicore_api perl_multicore_api_init
    = { perl_multicore_init, 0 };
@@ -197,12 +197,12 @@ static const struct perl_multicore_api perl_multicore_api_init
 static struct perl_multicore_api *perl_multicore_api
    = (struct perl_multicore_api *)&perl_multicore_api_init;
 
-#define perlinterp_release() perl_multicore_api->pmapi_release ()
-#define perlinterp_acquire() perl_multicore_api->pmapi_acquire ()
+#define perlinterp_release() perl_multicore_api->pmapi_release (aTHX)
+#define perlinterp_acquire() perl_multicore_api->pmapi_acquire (aTHX)
 
 /* this is the release/acquire implementation used as fallback */
 static void
-perl_multicore_nop (void)
+perl_multicore_nop (pTHX)
 {
 }
 
@@ -211,10 +211,8 @@ static const char perl_multicore_api_key[] = "perl_multicore_api";
 /* this is the initial implementation of "release" - it initialises */
 /* the api and then calls the real release function */
 static void
-perl_multicore_init (void)
+perl_multicore_init (pTHX)
 {
-  dTHX;
-
   /* check for existing API struct in PL_modglobal */
   SV **api_svp = hv_fetch (PL_modglobal, perl_multicore_api_key,
                            sizeof (perl_multicore_api_key) - 1, 1);
