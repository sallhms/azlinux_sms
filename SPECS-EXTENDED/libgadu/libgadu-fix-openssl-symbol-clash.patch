diff -up libgadu-1.12.2/test/manual/lib/hmac.c.orig libgadu-1.12.2/test/manual/lib/hmac.c
--- libgadu-1.12.2/test/manual/lib/hmac.c.orig	2017-01-21 18:46:22.000000000 +0100
+++ libgadu-1.12.2/test/manual/lib/hmac.c	2021-01-15 12:31:05.124142831 +0100
@@ -55,9 +55,9 @@ void gg_hmac_sha1(unsigned char *text, i
 
                 SHA_CTX      tctx;
 
-                SHA1_Init(&tctx);
-                SHA1_Update(&tctx, key, key_len);
-                SHA1_Final(tk, &tctx);
+                libgadu_SHA1_Init(&tctx);
+                libgadu_SHA1_Update(&tctx, key, key_len);
+                libgadu_SHA1_Final(tk, &tctx);
 
                 key = tk;
                 key_len = 20;
@@ -88,20 +88,20 @@ void gg_hmac_sha1(unsigned char *text, i
         /*
          * perform inner SHA1
          */
-        SHA1_Init(&context);                   /* init context for 1st
+        libgadu_SHA1_Init(&context);                   /* init context for 1st
                                                 * pass */
-        SHA1_Update(&context, k_ipad, 64);     /* start with inner pad */
-        SHA1_Update(&context, text, text_len); /* then text of datagram */
-        SHA1_Final(digest, &context);          /* finish up 1st pass */
+        libgadu_SHA1_Update(&context, k_ipad, 64);     /* start with inner pad */
+        libgadu_SHA1_Update(&context, text, text_len); /* then text of datagram */
+        libgadu_SHA1_Final(digest, &context);          /* finish up 1st pass */
         /*
          * perform outer SHA1
          */
-        SHA1_Init(&context);                   /* init context for 2nd
+        libgadu_SHA1_Init(&context);                   /* init context for 2nd
                                                 * pass */
-        SHA1_Update(&context, k_opad, 64);     /* start with outer pad */
-        SHA1_Update(&context, digest, 20);     /* then results of 1st
+        libgadu_SHA1_Update(&context, k_opad, 64);     /* start with outer pad */
+        libgadu_SHA1_Update(&context, digest, 20);     /* then results of 1st
                                                 * hash */
-        SHA1_Final(digest, &context);          /* finish up 2nd pass */
+        libgadu_SHA1_Final(digest, &context);          /* finish up 2nd pass */
 }
 
 #endif /* HAVE_OPENSSL */
diff -up libgadu-1.12.2/test/manual/lib/sha1.c.orig libgadu-1.12.2/test/manual/lib/sha1.c
--- libgadu-1.12.2/test/manual/lib/sha1.c.orig	2017-01-21 18:46:22.000000000 +0100
+++ libgadu-1.12.2/test/manual/lib/sha1.c	2021-01-15 12:29:04.528283516 +0100
@@ -55,9 +55,6 @@ typedef struct {
 } SHA_CTX;
 
 static void SHA1_Transform(uint32_t state[5], const unsigned char buffer[64]);
-void SHA1_Init(SHA_CTX* context);
-void SHA1_Update(SHA_CTX* context, const unsigned char* data, unsigned int len);
-void SHA1_Final(unsigned char digest[20], SHA_CTX* context);
 
 #define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))
 
@@ -139,7 +136,7 @@ typedef union {
 
 /* SHA1_Init - Initialize new context */
 
-void SHA1_Init(SHA_CTX* context)
+void libgadu_SHA1_Init(SHA_CTX* context)
 {
     /* SHA1 initialization constants */
     context->state[0] = 0x67452301;
@@ -153,7 +150,7 @@ void SHA1_Init(SHA_CTX* context)
 
 /* Run your data through this. */
 
-void SHA1_Update(SHA_CTX* context, const unsigned char* data, unsigned int len)
+void libgadu_SHA1_Update(SHA_CTX* context, const unsigned char* data, unsigned int len)
 {
 unsigned int i, j;
 
@@ -175,7 +172,7 @@ unsigned int i, j;
 
 /* Add padding and return the message digest. */
 
-void SHA1_Final(unsigned char digest[20], SHA_CTX* context)
+void libgadu_SHA1_Final(unsigned char digest[20], SHA_CTX* context)
 {
 uint32_t i;
 unsigned char finalcount[8];
@@ -184,11 +181,11 @@ unsigned char finalcount[8];
         finalcount[i] = (unsigned char)((context->count[(i >= 4 ? 0 : 1)]
          >> ((3-(i & 3)) * 8) ) & 255);  /* Endian independent */
     }
-    SHA1_Update(context, (unsigned char *)"\200", 1);
+    libgadu_SHA1_Update(context, (unsigned char *)"\200", 1);
     while ((context->count[0] & 504) != 448) {
-        SHA1_Update(context, (unsigned char *)"\0", 1);
+        libgadu_SHA1_Update(context, (unsigned char *)"\0", 1);
     }
-    SHA1_Update(context, finalcount, 8);  /* Should cause a SHA1_Transform() */
+    libgadu_SHA1_Update(context, finalcount, 8);  /* Should cause a SHA1_Transform() */
     for (i = 0; i < 20; i++) {
         digest[i] = (unsigned char)
          ((context->state[i>>2] >> ((3-(i & 3)) * 8) ) & 255);
diff -up libgadu-1.12.2/test/manual/lib/sha1.h.orig libgadu-1.12.2/test/manual/lib/sha1.h
--- libgadu-1.12.2/test/manual/lib/sha1.h.orig	2017-01-21 18:46:22.000000000 +0100
+++ libgadu-1.12.2/test/manual/lib/sha1.h	2021-01-15 12:32:01.584545153 +0100
@@ -24,6 +24,13 @@
 #ifdef HAVE_OPENSSL
 
 #include <openssl/sha.h>
+inline void libgadu_SHA1_Init(SHA_CTX* context) { SHA1_Init(context); }
+inline void libgadu_SHA1_Update(SHA_CTX* context, const unsigned char* data, unsigned int len) {
+     SHA1_Update(context, data, len);
+}
+inline void libgadu_SHA1_Final(unsigned char digest[20], SHA_CTX* context); {
+     SHA1_Final(digest, context);
+}
 
 #else
 
@@ -35,9 +42,9 @@ typedef struct {
     unsigned char buffer[64];
 } SHA_CTX;
 
-void SHA1_Init(SHA_CTX* context);
-void SHA1_Update(SHA_CTX* context, const unsigned char* data, unsigned int len);
-void SHA1_Final(unsigned char digest[20], SHA_CTX* context);
+void libgadu_SHA1_Init(SHA_CTX* context);
+void libgadu_SHA1_Update(SHA_CTX* context, const unsigned char* data, unsigned int len);
+void libgadu_SHA1_Final(unsigned char digest[20], SHA_CTX* context);
 
 #endif /* HAVE_OPENSSL */
 
